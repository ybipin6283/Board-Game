# pipeline creation
name: CICD Pipeline

on:
  push:
    branches: [ "main" ]

jobs:
  build:

    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn package --file pom.xml

    - uses: actions/upload-artifact@v4
      with:
        name: Boardgame
        path: target/*.jar
        
    - name: Trivy FS Scan
      run: |
        trivy fs --format table -o trivy-fs-report.html .
# sonarqube credentional we have to put as a secret key
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
# need to know more about this topic
    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq

  # Check the Quality Gate status.
    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      # Force to fail step after specific time.
      timeout-minutes: 5
      env:
       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
       SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
# to build the docker image my docker username and password we have to as a secret key
    - name: Build Docker Image
      run: |
        docker build -t ybipin/boardgame-test:latest .
# | we are using for the more than one line output at a single time
    - name: Trivy Image Scan
      run: |
        trivy image --format table -o trivy-image-report.html boardgame-test/board:latest

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with: # doker hub token / docker hub password all good.
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Push Docker Image
      run: |
          docker push ybipin/boardgame-test:latest
          
    - name: Kubectl Action # this is the command used for the deloyment of the cluster 
      uses: tale/kubectl-action@v1
      with:
        base64-kube-config: ${{ secrets.KUBE_CONFIG }} 
    - run: |
          kubectl apply -f deployment-service.yaml -n webapps
          kubectl get svc -n webapps

    
